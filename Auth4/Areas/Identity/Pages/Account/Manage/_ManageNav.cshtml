@inject SignInManager<IdentityUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item"><a class="nav-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">Profile</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Personal data</a></li>
    @if (User.IsInRole("Root"))
    {
        <li class="nav-item"><a class="nav-link @ManageNavPages.AddAdminNavClass(ViewContext)" id="Add-Admin" asp-page="./AdminRegister">Add Admin</a></li>
        <li class="nav-item"><a class="nav-link @ManageNavPages.ManageUserNavClass(ViewContext)" id="Manage-User" asp-page="./ManageUsers">Manage Users</a></li>
        
    }
    @if(User.IsInRole("Root") || User.IsInRole("Admin"))
    {
        <li class="nav-item"><a class="nav-link @ManageNavPages.ManageDeleteRequestNavClass(ViewContext)" id="Manage-Delete-Request" asp-page="./ManageDeleteRequest">Manage Delete Requests</a></li>
        <li class="nav-item"><a class="nav-link @ManageNavPages.ApprovalsNavClass(ViewContext)" id="Approvals" asp-page="./Approvals">Manage Creations</a></li>
    }
</ul>
